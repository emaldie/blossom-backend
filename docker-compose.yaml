services:
  postgres:
    image: postgres:17.0-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d ${POSTGRES_DB} -U $$POSTGRES_USER']
      interval: 2s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:6-jammy
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 2s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:8.0-M02-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 2s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
    volumes:
      - rmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 2s
      timeout: 5s
      retries: 5

  # auth:
  #   build:
  #     context: .
  #     dockerfile: ./apps/auth/Dockerfile
  #     target: development
  #   command: npm run start:dev auth
  #   env_file: ./apps/auth/.env
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #     - /usr/src/app/prisma
  #   restart: unless-stopped

  users:
    build:
      context: .
      dockerfile: ./apps/users/Dockerfile
      target: development
    command: npm run start:dev users
    env_file: ./apps/users/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/prisma
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: npm run start:dev api-gateway
    env_file: ./apps/api-gateway/.env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      # auth:
      #   condition: service_started
      users:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    restart: unless-stopped

volumes:
  pg_data:
  mongodb_data:
  redis_data:
  rmq_data: